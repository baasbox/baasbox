# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Swagger - Root Resources Listing
# GET     /api-docs.json               controllers.ApiHelpController.getResources

# GET     /api-docs.json/admin         controllers.ApiHelpController.getResource(path = "/api-docs.json/admin")
# GET     /admin.json/health           controllers.HealthController.getHealth
# GET     /admin.json/ping             controllers.HealthController.ping

# GET     /api-docs.json/user           controllers.ApiHelpController.getResource(path = "/api-docs.json/user")

# Admin Panel Static Asset
GET 	/console						controllers.Default.redirect(to = "/console/")
GET		/console/index.html				controllers.Default.redirect(to = "/console/")
GET		/console/login.html				controllers.Default.redirect(to = "/console/")
GET 	/console/						com.baasbox.controllers.Application.login()
GET     /console/js/routes      	 	com.baasbox.controllers.AllRoutes.javascriptRoutes()
GET     /console/*file               	controllers.Assets.at(path="/public/console", file)


#Assets action
POST	/admin/asset						com.baasbox.controllers.Asset.post()
GET		/admin/asset						com.baasbox.controllers.Asset.getAll()
DELETE	/admin/asset/:name					com.baasbox.controllers.Asset.delete(name: String)
GET		/asset/:name/data					com.baasbox.controllers.Asset.get(name: String)
GET		/asset/:name/download/resize/:w/:h	com.baasbox.controllers.Asset.downloadResizedWH(name: String, download: Boolean ?= true, w: String,h: String)
GET		/asset/:name/download/resize/:perc	com.baasbox.controllers.Asset.downloadResizedInPerc(name: String, download: Boolean ?= true, perc: String)
GET		/asset/:name/download/resizeId/:sizeId		com.baasbox.controllers.Asset.downloadSizeId(name: String, download: Boolean ?= true, sizeId: Integer)
GET		/asset/:name/download				com.baasbox.controllers.Asset.download(name: String, download: Boolean ?= true)
GET		/asset/:name/resize/:w/:h			com.baasbox.controllers.Asset.downloadResizedWH(name: String, download: Boolean ?= false, w: String, h: String)
GET		/asset/:name/resize/:perc			com.baasbox.controllers.Asset.downloadResizedInPerc(name: String, download: Boolean ?= false, perc: String)
GET		/asset/:name/resizeId/:sizeId		com.baasbox.controllers.Asset.downloadSizeId(name: String, download: Boolean ?= false, sizeId: Integer)
GET		/asset/:name						com.baasbox.controllers.Asset.download(name: String, download: Boolean ?= false)
 
# User actions
POST	/login						com.baasbox.controllers.User.login()
POST	/logout/:deviceid		    com.baasbox.controllers.User.logoutWithDevice(deviceid: String)
POST 	/logout						com.baasbox.controllers.User.logoutWithoutDevice()
POST	/user						com.baasbox.controllers.User.signUp()
GET		/user						com.baasbox.controllers.User.getCurrentUser()
PUT		/user						com.baasbox.controllers.User.updateProfile()
PUT		/user/password				com.baasbox.controllers.User.changePassword()
GET		/user/:username/exists		com.baasbox.controllers.User.exists(username: String)
GET		/user/:username/password/reset   			com.baasbox.controllers.User.resetPasswordStep1(username: String)
GET		/user/password/reset/:base64     			com.baasbox.controllers.User.resetPasswordStep2(base64: String)
POST	/user/password/reset/:base64     			com.baasbox.controllers.User.resetPasswordStep3(base64: String)

# Push
POST	/push/message/:username		    com.baasbox.controllers.Push.send(username: String)
PUT 	/push/device/:os/:deviceId      com.baasbox.controllers.Push.enablePush(os: String, deviceId: String)

#Storage Actions
GET		 /document/%23:rid							com.baasbox.controllers.Document.getDocumentByRid(rid: String)
POST	 /document/:collection	 					com.baasbox.controllers.Document.createDocument(collection: String)
GET		 /document/:collection						com.baasbox.controllers.Document.getDocuments(collection: String)
GET 	 /document/:collection/count  				com.baasbox.controllers.Document.getCount(collection: String)
PUT 	 /document/:collection/%23:rid					com.baasbox.controllers.Document.updateDocument(collection: String, rid: String, isUUID: Boolean ?= false)
GET		 /document/:collection/%23:rid					com.baasbox.controllers.Document.getDocument(collection: String, rid: String, isUUID: Boolean ?= false)
DELETE	 /document/:collection/%23:rid					com.baasbox.controllers.Document.deleteDocument(collection: String, rid: String, isUUID: Boolean ?= false)

PUT 	 /document/:collection/:uuid					com.baasbox.controllers.Document.updateDocument(collection: String, uuid: String, isUUID: Boolean ?= true)
GET		 /document/:collection/:uuid					com.baasbox.controllers.Document.getDocument(collection: String, uuid: String, isUUID: Boolean ?= true)
DELETE	 /document/:collection/:uuid					com.baasbox.controllers.Document.deleteDocument(collection: String, uuid: String, isUUID: Boolean ?= true)


#grant and revoke permissions
PUT		/document/:collection/%23:rid/:action/user/:username		com.baasbox.controllers.Document.grantToUser(collection:String, rid:String, username:String, action:String, isUUID: Boolean ?= false)
DELETE	/document/:collection/%23:rid/:action/user/:username		com.baasbox.controllers.Document.revokeToUser(collection:String, rid:String, username:String, action:String, isUUID: Boolean ?= false)
PUT		/document/:collection/%23:rid/:action/role/:rolename		com.baasbox.controllers.Document.grantToRole(collection:String, rid:String, rolename:String, action:String, isUUID: Boolean ?= false)
DELETE	/document/:collection/%23:rid/:action/role/:rolename		com.baasbox.controllers.Document.revokeToRole(collection:String, rid:String, rolename:String, action:String, isUUID: Boolean ?= false)

PUT		/document/:collection/:uuid/:action/user/:username		com.baasbox.controllers.Document.grantToUser(collection:String, uuid:String, username:String, action:String, isUUID: Boolean ?= true)
DELETE	/document/:collection/:uuid/:action/user/:username		com.baasbox.controllers.Document.revokeToUser(collection:String, uuid:String, username:String, action:String, isUUID: Boolean ?= true)
PUT		/document/:collection/:uuid/:action/role/:rolename		com.baasbox.controllers.Document.grantToRole(collection:String, uuid:String, rolename:String, action:String, isUUID: Boolean ?= true)
DELETE	/document/:collection/:uuid/:action/role/:rolename		com.baasbox.controllers.Document.revokeToRole(collection:String, uuid:String, rolename:String, action:String, isUUID: Boolean ?= true)


#Admin actions
GET		/admin/user						com.baasbox.controllers.Admin.getUsers()
POST	/admin/user						com.baasbox.controllers.Admin.createUser()
PUT		/admin/user/:username			com.baasbox.controllers.Admin.updateUser(username: String)
POST	/admin/collection/:name			com.baasbox.controllers.Admin.createCollection(name: String)
GET		/admin/collection				com.baasbox.controllers.Admin.getCollections()
GET 	/admin/apiVersion				com.baasbox.controllers.Application.apiVersion()
GET 	/admin/dbStatistics				com.baasbox.controllers.Admin.getDBStatistics()	
GET		/admin/roles					com.baasbox.controllers.Admin.getRoles()


GET		/admin/configuration/dump.json							com.baasbox.controllers.Admin.dumpConfiguration(String ?= "json")
GET		/admin/configuration/dump.txt							com.baasbox.controllers.Admin.dumpConfiguration(String ?= "txt")
GET		/admin/configuration/:section							com.baasbox.controllers.Admin.getConfiguration(section: String)
PUT		/admin/configuration/:section/:subSection/:key/:value	com.baasbox.controllers.Admin.setConfiguration(section: String, subSection: String, key: String, value: String)
PUT		/admin/configuration/:section/:key/:value				com.baasbox.controllers.Admin.setConfiguration(section: String, subSection: String ?= "", key: String, value: String)

GET		/admin/version/latest									com.baasbox.controllers.Admin.getLatestVersion()
DELETE	/admin/db/:timeout										com.baasbox.controllers.Admin.dropDb(timeout:Long)
POST	/admin/db/export										com.baasbox.controllers.Admin.exportDb()
GET	    /admin/db/export/:filename							    com.baasbox.controllers.Admin.getExport(filename:String)
DELETE	/admin/db/export/:filename							    com.baasbox.controllers.Admin.deleteExport(filename:String)
GET	    /admin/db/export										com.baasbox.controllers.Admin.getExports()

POST	/admin/db/import         							    com.baasbox.controllers.Admin.importDb()



# Home page & general API
GET		/refresh					com.baasbox.controllers.Generic.refreshSessionToken()
GET     /                           com.baasbox.controllers.Application.index()
GET 	/*file						controllers.Assets.at(path="/public/", file)
OPTIONS /*dummy						com.baasbox.controllers.Generic.getOptions(dummy: String)
